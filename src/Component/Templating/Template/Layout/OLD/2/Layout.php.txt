<?php
namespace Laventure\Component\Templating\Template\Layout;


use Laventure\Component\Templating\Template\Template;
use Laventure\Component\Templating\Template\TemplateInterface;

/**
 * @Layout
 *
 * @author Jean-Claude <jeanyao@ymail.com>
 *
 * @license https://github.com/jeandev84/laventure-framework/blob/master/LICENSE
 *
 * @package Laventure\Component\Templating\Template\Layout
*/
class Layout extends Template implements LayoutInterface
{


    /**
     * @var Template
    */
    protected Template $template;



    /**
     * @param string $path
     *
     * @param Template $template
    */
    public function __construct(string $path, Template $template)
    {
        parent::__construct($path, $template->getParameters());
        $this->template = $template;
    }





    /**
     * @inheritDoc
    */
    public function getTemplate(): TemplateInterface
    {
        return $this->template;
    }






    /**
     * @inheritDoc
    */
    public function __toString(): string
    {
        return $this->compileTemplate(parent::__toString());
    }





    /**
     * @param string $template
     *
     * @return string
    */
    private function compileTemplate(string $template): string
    {
        return $this->compileYields($template);
    }




    /**
     * @param string $template
     *
     * @return string
    */
    private function compileYields(string $template): string
    {
        $blocks = $this->getTemplateBlocks();

        foreach ($blocks as $name => $content) {
            $template = preg_replace("/@yield-$name/is", $content, $template);
        }

        return $template;
    }





    /**
     * @return array
    */
    private function getTemplateBlocks(): array
    {
        $pattern = "/@block-(.*?):(.*?)@endblock/is";

        preg_match_all($pattern, $this->template, $matches, PREG_SET_ORDER);

        if (empty($matches)) {
            return [];
        }

        $blocks = [];

        foreach ($matches as $item) {

            if (! array_key_exists($item[1], $blocks)) { $blocks[$item[1]] = ''; }

            if (! str_contains($item[2], '@parent')) {
                $blocks[$item[1]] = $item[2];
            } else {
                $blocks[$item[1]] = str_replace('@parent', $blocks[$item[1]], $item[2]);
            }
        }

        dd($blocks);
        return $blocks;
    }

}