<?php
namespace Laventure\Component\Templating\Template\Engine;

use Laventure\Component\Templating\Template\Layout\LayoutInterface;
use Laventure\Component\Templating\Template\Template;
use Laventure\Component\Templating\Template\TemplateInterface;


/**
 * @TemplateEngine
 *
 * @author Jean-Claude <jeanyao@ymail.com>
 *
 * @license https://github.com/jeandev84/laventure-framework/blob/master/LICENSE
 *
 * @package Laventure\Component\Templating\Template\Engine
*/
class TemplateEngine implements TemplateEngineInterface
{


    /**
     * @var array
    */
    protected array $blocks = [];



    /**
     * @param string $resourcePath
    */
    public function __construct(protected string $resourcePath)
    {
    }




    /**
     * @inheritDoc
    */
    public function compile(TemplateInterface $template): string
    {
         $template = $this->compileExtends($template->__toString());
         $template = $this->compileBlocks($template);

         $layout   = $this->compileYields($template);

         dd($layout);
    }




    /**
     * @param string $layout
     *
     * @return string
    */
    private function compileYields(string $layout): string
    {
        // compile yields
        foreach ($this->blocks as $name => $content) {
            $layout = preg_replace("/@yield-$name/is", $content, $layout);
        }


        return $layout;
    }





    /**
     * @param string $template
     *
     * @return string
    */
    public function compileExtends(string $template): string
    {
         preg_match("/@(extends(.*))/", $template, $matches);

         if (empty($matches[2])) {
              return '';
         }

         $matches[2] = trim(str_replace(['(', ')', "'", '"'], '', $matches[2]), '/');

         return $this->content($matches[2]);
    }






    /**
     * @param TemplateInterface $template
     *
     * @return string
    */
    private function compileIncludes(TemplateInterface $template): string
    {
         $content = file_get_contents($template->getPath());

         preg_match_all("/@(extends(.*)|include(.*))/", $content, $matches, PREG_SET_ORDER);

         foreach ($matches as $value) {
              $value[2] = trim(str_replace(['(', ')', "'", '"'], '', $value[2]), '/');
              $value[2] = $this->resourcePath . '/'. $value[2];
              dd($value[0]);
              $content  = str_replace($value[0], file_get_contents($value[2]), $content);
         }

         return $content;
    }





    /**
     * @param $template
     *
     * @return string
    */
    private function compilePHP($template): string
    {
        $template = $this->compileEchos($template);
        $template = $this->compileLoop($template);
        $template = $this->compileIf($template);

        return $this->compileSwitch($template);
    }






    /**
     * @param $template
     *
     * @return string
    */
    private function compileEchos($template): string
    {
        return preg_replace('/{{(\s*(.*)\s*).}}/i', '<?=$1 ?>', $template);
    }





    /**
     * @param $template
     *
     * @return string
    */
    private function compileLoop($template): string
    {
        $template = preg_replace('/@loop(.*):/', '<?php foreach$1: ?>', $template);
        $template = preg_replace('/@endloop/', '<?php endforeach; ?>', $template);

        return $this->compileFor($template);
    }





    /**
     * @param $template
     *
     * @return string
    */
    private function compileFor($template): string
    {
        $template = preg_replace('/@for(.*):/', '<?php for$1: ?>', $template);
        return preg_replace('/@endfor/', '<?php endfor; ?>', $template);
    }





    /**
     * @param $template
     *
     * @return string
    */
    private function compileSwitch($template): string
    {
        $template = preg_replace('/@switch(.*):/', '<?php switch$1: ?>', $template);
        return preg_replace('/@endswitch/', '<?php endswitch; ?>', $template);
    }





    /**
     * @param $template
     *
     * @return string
    */
    private function compileIf($template): string
    {
        $template = preg_replace('/@if(.*):/', '<?php if$1: ?>', $template);
        return preg_replace('/@endif/', '<?php endif; ?>', $template);
    }


    /**
     * @param string $template
     *
     * @return string
    */
    private function compileBlocks(string $template)
    {
        $pattern = "/@block-(.*?):(.*?)@endblock/is";

        preg_match_all($pattern, $template, $matches, PREG_SET_ORDER);

        if (! empty($matches)) {
            foreach ($matches as $item) {
                if (! array_key_exists($item[1], $this->blocks)) { $this->blocks[$item[1]] = ''; }
                if (str_contains($item[2], '@parent') === false) {
                    $this->blocks[$item[1]] = $item[2];
                } else {
                    $this->blocks[$item[1]] = str_replace('@parent', $this->blocks[$item[1]], $item[2]);
                }
                $template = str_replace($item[0], '', $template);
            }
        }

        return $template;
    }





    /**
     * @param $template
     *
     * @return array
    */
    private function getBlocks($template): array
    {
        $pattern = "/@block-(.*?):(.*?)@endblock/is";

        preg_match_all($pattern, $template, $matches, PREG_SET_ORDER);

        if (empty($matches)) {
            return [];
        }

        foreach ($matches as $item) {
            /*
            if (str_contains($item[2], '@parent') === false) {
                #$blocks[$item[1]] = $item[2];
            } else {
                $blocks[$item[1]] = $item[2];
            }
            */
            $this->blocks[$item[1]] = $item[2];
        }

        return $this->blocks;
    }




    /**
     * @param string $path
     *
     * @return string
    */
    private function path(string $path)
    {
        return $this->resourcePath . '/'. $path;
    }





    /**
     * @param string $path
     *
     * @return string|false
    */
    private function content(string $path): string|false
    {
        return file_get_contents($this->path($path));
    }
}