<?php
namespace Laventure\Component\Templating\Template\Engine;

use Laventure\Component\Templating\Template\Layout\LayoutInterface;

class TemplateEngine
{

       /**
        * @param LayoutInterface $layout
       */
       public function __construct(protected LayoutInterface $layout)
       {
       }





       /**
        * @return LayoutInterface
       */
       public function getLayout(): LayoutInterface
       {
           return $this->layout;
       }



       public function compile()
       {
             return '';
       }




       /**
        * @return TemplateInterface
       */
       public function getTemplate(): TemplateInterface
       {
           return $this->layout->getTemplate();
       }




       /**
        * @param Template $template
        *
        * @return array
       */
       public function getBlocks(Template $template): array
       {
            $pattern = "/@block-(.*?):(.*?)@endblock/is";

            preg_match_all($pattern, $template, $matches, PREG_SET_ORDER);

            if (empty($matches)) {
               return [];
            }

            $blocks = [];

            foreach ($matches as $item) {
               $blocks[$item[1]] = $item[2];
            }

            return $blocks;
       }




      /**
       * @param Template $template
       *
       * @param array $blocks
       *
       * @return string
      */
      public function compileYields(Template $template, array $blocks): string
      {
          foreach ($blocks as $name => $content) {
              $template = preg_replace("/@yield-$name/is", $content, $template);
          }

          return $template;
      }




      /**
       * @param Template $template
       *
       * @return string
      */
      public function compileEchos(Template $template): string
      {

      }




     /**
      * @param Template $template
      *
      * @return string
     */
      public function compileLoop(Template $template): string
      {
          $template = preg_replace('/@loop((.*)\s*as\s*(.*)):/', '<?php foreach ($users as $user)?>', $template);
          $template = preg_replace('/{{\s*(.*)\s*}}/', '<?= $$1 ?>', $template);
          return preg_replace('/@endloop/', '<?php endforeach; ?>', $template);
      }


      public function getPatterns(): array
      {
           return [
               '/@loop((.*)\s*as\s*(.*)):/',
               '/{{\s*(.*)\s*}}/'
           ];
      }
}